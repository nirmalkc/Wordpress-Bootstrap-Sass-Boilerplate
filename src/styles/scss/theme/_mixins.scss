// --------------------------
// Generic Mixins
// --------------------------
// 
// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) + px;
	font-size: $sizeValue + rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
// Thanks to Nicolas Gallagher (http://nicolasgallagher.com/micro-clearfix-hack)
%clearfix {
    *zoom: 1;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}


// Box Sizing
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
  -moz-box-sizing: $box-model; // Firefox <= 19
  box-sizing: $box-model;
}

// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius
@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}


// Placeholder text color
@mixin placeholdertext-color($element,$color) {
  #{$element}::-webkit-input-placeholder {
    color: $color;
  }

  #{$element}:-moz-placeholder { /* Firefox 18- */
    color: $color;
  }

  #{$element}::-moz-placeholder {  /* Firefox 19+ */
    color: $color;
  }

  #{$element}:-ms-input-placeholder {
    color: $color;
  }
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Text Truncation
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Simple Box
@mixin box-size($w, $h:$w) {
  width: $w;
  height: $h;
  overflow: auto;
}

// Box Shadow
@mixin box-shadow($a, $b, $c, $color) {
  -moz-box-shadow: $a $b $c $color;
  -webkit-box-shadow: $a $b $c $color;
  box-shadow: $a $b $c $color;
}

// Circle
@mixin draw-circle($radius, $color) {
  @include border-radius($radius/2+px);
  background-color: $color;
  height:$radius+px;
  width:$radius+px;
  -moz-background-clip: padding;     /* Firefox 3.6 */
  -webkit-background-clip: padding;  /* Safari 4? Chrome 6? */
  background-clip: padding-box;
}

// Absolute positioning
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// Centering mixin
@mixin content-centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50);
  }
}

// Visually hiding an element without using display:none.
//
// USAGE:
//  .visually-hidden {
//      @extend %visuallyhidden;
//  }

%visuallyhidden {
    clip: rect(0, 0, 0, 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

// Grayscale
@mixin grayscale($value) {
    -webkit-filter: #{"grayscale(#{$value})"};
    -moz-filter: #{"grayscale(#{$value})"};
    filter:#{"grayscale(#{$value})"};
}

// Responsive breakpoint mixin
// ------------------------------
// Usage:
// 
// @include breakpoint(lg) {
//    <object-property: value>
// }
@mixin breakpoint($width) {
    @if $width == lg {
        @media only screen and (max-width:$breakpoint-lg) {
            @content;
        }
    }
    @else if $width == md {
        @media only screen and (max-width:$breakpoint-md) {
            @content;
        }
    }
    @else if $width == sm {
        @media only screen and (max-width:$breakpoint-sm) {
            @content;
        }
    }
}

// --------------------------
// Project Specific Mixins
// --------------------------
// 
// Shadow
@mixin shadow-default() {
  @include box-shadow(1px, 2px, 3px, 0, rgba(0, 0, 0, .2));
}

@mixin shadow-none() {
  @include box-shadow(0, 0, 0, 0, rgba(0, 0, 0, 0));
}

@mixin shadow-thin() {
  @include box-shadow(0, 1px, 1px, 0, rgba(0, 0, 0, .2));
}

// Transitions
@mixin simple-transition() {
  @include transition(all .2s ease-in-out);
}

// Text Link
@mixin text-link($nsc, $hsc) {
  color: $nsc;
  @include simple-transition;
  &:hover {
    color: $hsc;
    @include simple-transition;
    text-decoration: none !important;
  }
}